generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String          @id @default(uuid())
  email                    String          @unique
  username                 String          @unique
  password                 String
  friends                  User[]          @relation("Friends")
  friend                   User?           @relation("Friends", references: [id], fields: [friendId], onDelete: SetNull)
  friendId                 String?
  joinedChannels           Channel[]       @relation("JoinedChannels")
  createdChannels          Channel[]       @relation("CreatedChannels")
  UserOnChannel            UserOnChannel[]
  messages                 Message[]
  VoiceRoom                VoiceRoom?      @relation(fields: [voiceRoomId], references: [id], onDelete: SetNull)
  voiceRoomId              String?
  IsVerified               Boolean         @default(false)
  verificationCode         Int?
  resetPasswordAttempt     Int             @default(0)
  lastResetPasswordAttempt DateTime?       @db.Timestamp()
  lastLoginIpAddress       String?
  sentFriendRequests       FriendRequest[] @relation("sentFriendRequests")
  receivedFriendRequests   FriendRequest[] @relation("receivedFriendRequests")
}

model Channel {
  id            String          @id @default(uuid())
  title         String          @unique
  category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    String
  members       User[]          @relation("JoinedChannels")
  owner         User            @relation("CreatedChannels", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String
  UserOnChannel UserOnChannel[]
  Topics        Topic[]
  isPublic      Boolean         @default(true)
  roles         Role[]
  logo          String          @default("https://linkshortner.net/wsIbg")
  logoPath      String?
}

model Category {
  id       String    @id @default(uuid())
  title    String    @unique
  channels Channel[]
}

model Role {
  id          String        @id @default(uuid())
  name        String
  permissions Permissions[]
  channel     Channel       @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId   String
}

model Topic {
  id         Int         @id @default(autoincrement())
  name       String
  channel    Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId  String
  TextRooms  TextRoom[]
  VoiceRooms VoiceRoom[]
}

model FriendRequest {
  id         Int    @id @default(autoincrement())
  sender     User   @relation("sentFriendRequests", references: [id], fields: [senderId])
  senderId   String
  receiver   User   @relation("receivedFriendRequests", references: [id], fields: [receiverId])
  receiverId String
}

model TextRoom {
  id       String    @id @default(uuid())
  name     String
  topic    Topic     @relation(fields: [topicId], references: [id])
  topicId  Int
  messages Message[]
}

model VoiceRoom {
  id          String @id @default(uuid())
  name        String
  topic       Topic  @relation(fields: [topicId], references: [id])
  topicId     Int
  participate User[]
}

model Message {
  id                Int                 @id @default(autoincrement())
  author            User                @relation(fields: [authorId], references: [id])
  authorId          String
  content           String
  sentAt            DateTime            @default(now())
  reactions         Reaction[]
  MessageOnReaction MessageOnReaction[]
  TextRoom          TextRoom?           @relation(fields: [textRoomId], references: [id])
  textRoomId        String?
}

model Reaction {
  id                Int                 @id @default(autoincrement())
  emojiKey          String              @unique
  message           Message[]
  MessageOnReaction MessageOnReaction[]
}

model MessageOnReaction {
  message    Message  @relation(fields: [messageId], references: [id])
  messageId  Int
  reaction   Reaction @relation(fields: [reactionId], references: [id])
  reactionId Int

  @@id([reactionId, messageId])
}

model UserOnChannel {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  cahnnel    Channel  @relation(fields: [channelId], references: [id])
  channelId  String
  assignedAt DateTime @default(now())

  @@id([userId, channelId])
}

enum Permissions {
  CreateRoom
  EditRoom
  DeleteRoom
  KickUser
  BanUser
  God_Admin
  Admin
}
